[
    {
        "function": "public static boolean check(String passwd, String hashed) {\n        try {\n            String[] parts = hashed.split(\"\\\\$\");\n\n            if (parts.length != 5 || !parts[1].equals(\"s0\")) {\n                throw new IllegalArgumentException(\"Invalid hashed value\");\n            }\n\n            long params = Long.parseLong(parts[2], 16);\n            byte[] salt = decode(parts[3].toCharArray());\n            byte[] derived0 = decode(parts[4].toCharArray());\n\n            int N = (int) Math.pow(2, params >> 16 & 0xffff);\n            int r = (int) params >> 8 & 0xff;\n            int p = (int) params      & 0xff;\n\n            byte[] derived1 = SCrypt.scrypt(passwd.getBytes(\"UTF-8\"), salt, N, r, p, 32);\n\n            if (derived0.length != derived1.length) return false;\n\n            int result = 0;\n            for (int i = 0; i < derived0.length; i++) {\n                result |= derived0[i] ^ derived1[i];\n            }\n            return result == 0;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\"JVM doesn't support UTF-8?\");\n        } catch (GeneralSecurityException e) {\n            throw new IllegalStateException(\"JVM doesn't support SHA1PRNG or HMAC_SHA256?\");\n        }\n    }",
        "prompt_type": "Chain-of-Thought",
        "cohere_summary": "Here is a step-by-step explanation of the function:\n1. Understanding the Function:\nThe function `check` appears to be a password verification function. It takes a `passwd` (password) and a `hashed` value as input and returns a boolean value (`true` or `false`). The function likely checks if the `passwd` matches the hashed value, which could be a hashed password.\n\n2. Identifying Inputs and Outputs:\n- Inputs:\n  - `passwd`: A string representing the password to be checked.\n  - `hashed`: A string representing the hashed value against which the password will be compared.\n\n- Output:\n  - A boolean value (`true` or `false`) indicating whether the `passwd` matches the hashed value.\n\n3. Summarizing the Function:\nThe `check` function verifies if the provided `passwd` matches the `hashed` value. It does this by performing the following steps:\n- Splitting the `hashed` value into different parts using a delimiter (\"$\").\n- Checking if the hashed value has the correct format and length.\n- Extracting parameters, salt, and derived key from the hashed value.\n- Computing the derived key for the provided `passwd` using the extracted parameters and salt.\n- Comparing the derived key from the `passwd` with the derived key from the hashed value.\n- Returning `true` if the derived keys match, indicating a successful password verification, and `false` otherwise.\n\nIn summary, the `check` function is used to verify if a given password (`passwd`) matches a hashed value (`hashed`), likely for authentication or password validation purposes. It employs a specific algorithm (SCrypt) to derive keys and ensure secure password verification.",
        "reference_summary": "Compare the supplied plaintext password to a hashed password.\n\n@param   passwd  Plaintext password.\n@param   hashed  scrypt hashed password.\n\n@return true if passwd matches hashed value.",
        "BERTScore": 0.5984
    },
    {
        "function": "public static Platform detect() throws UnsupportedPlatformException {\n        String osArch = getProperty(\"os.arch\");\n        String osName = getProperty(\"os.name\");\n\n        for (Arch arch : Arch.values()) {\n            if (arch.pattern.matcher(osArch).matches()) {\n                for (OS os : OS.values()) {\n                    if (os.pattern.matcher(osName).matches()) {\n                        return new Platform(arch, os);\n                    }\n                }\n            }\n        }\n\n        String msg = String.format(\"Unsupported platform %s %s\", osArch, osName);\n        throw new UnsupportedPlatformException(msg);\n    }",
        "prompt_type": "Chain-of-Thought",
        "cohere_summary": "Here is a step-by-step explanation of the function:\n1. Understanding the function: The function `detect` is used to identify the platform (operating system and architecture) on which the Java code is running.\n2. Identifying the inputs and outputs:\n   - Inputs: There are no explicit inputs passed to the function. However, it uses the system properties \"os.arch\" and \"os.name\" as implicit inputs.\n   - Outputs: The function returns a `Platform` object that represents the detected platform. If the platform is not recognized, it throws an `UnsupportedPlatformException`.\n3. Summarizing the function:\n   - The `detect` function retrieves the values of the \"os.arch\" and \"os.name\" system properties using the `getProperty` method.\n   - It then iterates through the possible values of the `Arch` enum and checks if the `os.arch` property matches any of the enum values using a regular expression matcher.\n   - For each matching `Arch` value, it further iterates through the possible values of the `OS` enum and checks if the `os.name` property matches any of the enum values using a regular expression matcher.\n   - If a match is found for both the architecture and operating system, a new `Platform` object is created with the corresponding `Arch` and `OS` values, and it is returned.\n   - If no match is found, an `UnsupportedPlatformException` is thrown with a message indicating the unsupported platform architecture and name.\n\nIn summary, the `detect` function identifies the platform by matching the \"os.arch\" and \"os.name\" system properties against predefined patterns for different architectures and operating systems. If a match is found, it returns the corresponding `Platform` object. If no match is found, it throws an exception indicating an unsupported platform.",
        "reference_summary": "Attempt to detect the current platform.\n\n@return The current platform.\n\n@throws UnsupportedPlatformException if the platform cannot be detected.",
        "BERTScore": 0.3833
    },
    {
        "function": "public <T> T getNodeMetaData(Object key) {\n        if (metaDataMap == null) {\n            return (T) null;\n        }\n        return (T) metaDataMap.get(key);\n    }",
        "prompt_type": "Chain-of-Thought",
        "cohere_summary": "Here is a step-by-step explanation of the function:\n\n1. Understanding the function:  \nThe function `getNodeMetaData` retrieves metadata associated with a given key from a map or dictionary-like structure. It is a generic method, meaning it can work with different types of data specified by the type parameter `T`.\n\n2. Identifying the inputs and outputs:  \n- Input:  \n  - `key`: This is the unique identifier or key for which the metadata needs to be retrieved. It is of type `Object`, allowing flexibility in the type of key used.\n\n- Output:  \n  - `T`: The function returns an object of type `T`, which represents the metadata associated with the given key. If the metadata map is `null` or the key is not found in the map, the function returns `null`.\n\n3. Summarizing the function:  \nThe `getNodeMetaData` function is a generic method that retrieves metadata of type `T` associated with a given key from a map. If the metadata map is `null` or the key is not found, it returns `null`. This function provides a way to access metadata based on a specific key, allowing for flexible data retrieval.",
        "reference_summary": "Gets the node meta data.\n\n@param key - the meta data key\n@return the node meta data value for this key",
        "BERTScore": 0.408
    },
    {
        "function": "public void copyNodeMetaData(ASTNode other) {\n        if (other.metaDataMap == null) {\n            return;\n        }\n        if (metaDataMap == null) {\n            metaDataMap = new ListHashMap();\n        }\n        metaDataMap.putAll(other.metaDataMap);\n    }",
        "prompt_type": "Chain-of-Thought",
        "cohere_summary": "Here is a step-by-step explanation of the function:\n\n1. Understand the function: The function `copyNodeMetaData` appears to be related to copying metadata from one AST (Abstract Syntax Tree) node to another. AST nodes are commonly used in compilers and parsers to represent the structure of source code.\n\n2. Identify the inputs and outputs:\n   - Input: The function takes one parameter, `other`, which is an instance of the `ASTNode` class.\n   - Output: The function does not return any value explicitly, but it modifies the `metaDataMap` field of the current instance (presumably an `ASTNode` as well).\n\n3. Summarize the function:\nThe `copyNodeMetaData` function copies the metadata map from the `other` ASTNode to the current ASTNode. If the `other` node does not have any metadata (i.e., `other.metaDataMap` is null), the function does nothing. If the current node's `metaDataMap` is null, it creates a new `ListHashMap` to store the metadata. Finally, it puts all the entries from `other.metaDataMap` into the current node's `metaDataMap`.\n\nIn summary, the `copyNodeMetaData` function is used to copy metadata from one ASTNode to another, ensuring that the metadata is properly transferred and stored in the receiving node's `metaDataMap`.",
        "reference_summary": "Copies all node meta data from the other node to this one\n@param other - the other node",
        "BERTScore": 0.3801
    },
    {
        "function": "public void setNodeMetaData(Object key, Object value) {\n        if (key==null) throw new GroovyBugError(\"Tried to set meta data with null key on \"+this+\".\");\n        if (metaDataMap == null) {\n            metaDataMap = new ListHashMap();\n        }\n        Object old = metaDataMap.put(key,value);\n        if (old!=null) throw new GroovyBugError(\"Tried to overwrite existing meta data \"+this+\".\");\n    }",
        "prompt_type": "Chain-of-Thought",
        "cohere_summary": "Here is a step-by-step explanation of the function:\n\n1. Understanding the function: The function `setNodeMetaData` is used to set metadata for a specific key on a particular object. It takes two parameters - `key` and `value`, and throws an error if the key is null or if there is already metadata set for the given key.\n\n2. Identifying the inputs and outputs:\n   - Inputs:\n     - `key`: The unique identifier for the metadata. It cannot be null.\n     - `value`: The value associated with the given key.\n\n   - Output: None. It is a `void` function, which means it performs an action but does not return any value.\n\n3. Summarizing the function:\nThe `setNodeMetaData` function is used to associate metadata with a specific key on an object. It ensures that the key is not null and checks if the metadata for the given key already exists. If the metadata does not exist, it sets the new metadata with the provided key and value. If the metadata already exists, it throws an error to prevent overwriting the existing metadata. This function is useful for maintaining unique metadata associations with objects.",
        "reference_summary": "Sets the node meta data.\n\n@param key - the meta data key\n@param value - the meta data value\n@throws GroovyBugError if key is null or there is already meta\ndata under that key",
        "BERTScore": 0.3807
    }
]