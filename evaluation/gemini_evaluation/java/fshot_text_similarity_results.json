[
    {
        "function": "public static boolean check(String passwd, String hashed) {\n        try {\n            String[] parts = hashed.split(\"\\\\$\");\n\n            if (parts.length != 5 || !parts[1].equals(\"s0\")) {\n                throw new IllegalArgumentException(\"Invalid hashed value\");\n            }\n\n            long params = Long.parseLong(parts[2], 16);\n            byte[] salt = decode(parts[3].toCharArray());\n            byte[] derived0 = decode(parts[4].toCharArray());\n\n            int N = (int) Math.pow(2, params >> 16 & 0xffff);\n            int r = (int) params >> 8 & 0xff;\n            int p = (int) params      & 0xff;\n\n            byte[] derived1 = SCrypt.scrypt(passwd.getBytes(\"UTF-8\"), salt, N, r, p, 32);\n\n            if (derived0.length != derived1.length) return false;\n\n            int result = 0;\n            for (int i = 0; i < derived0.length; i++) {\n                result |= derived0[i] ^ derived1[i];\n            }\n            return result == 0;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\"JVM doesn't support UTF-8?\");\n        } catch (GeneralSecurityException e) {\n            throw new IllegalStateException(\"JVM doesn't support SHA1PRNG or HMAC_SHA256?\");\n        }\n    }",
        "prompt_type": "Few-Shot",
        "gemini_summary": "Summary: This function checks if a given password matches a provided SCrypt hashed value. It parses the hashed string, extracts the salt and derived key, and then uses SCrypt to generate a new derived key from the input password and the extracted salt. Finally, it compares the generated derived key with the stored derived key to determine if the password is correct. It returns true if the password matches, false otherwise. The function also validates the format of the hashed string and handles potential exceptions related to UTF-8 encoding and security algorithms.",
        "reference_summary": "Compare the supplied plaintext password to a hashed password.\n\n@param   passwd  Plaintext password.\n@param   hashed  scrypt hashed password.\n\n@return true if passwd matches hashed value.",
        "BLEU": 0.0,
        "METEOR": 0.2488,
        "ROUGE-L": 0.2368
    },
    {
        "function": "public static Platform detect() throws UnsupportedPlatformException {\n        String osArch = getProperty(\"os.arch\");\n        String osName = getProperty(\"os.name\");\n\n        for (Arch arch : Arch.values()) {\n            if (arch.pattern.matcher(osArch).matches()) {\n                for (OS os : OS.values()) {\n                    if (os.pattern.matcher(osName).matches()) {\n                        return new Platform(arch, os);\n                    }\n                }\n            }\n        }\n\n        String msg = String.format(\"Unsupported platform %s %s\", osArch, osName);\n        throw new UnsupportedPlatformException(msg);\n    }",
        "prompt_type": "Few-Shot",
        "gemini_summary": "Summary: This function detects the operating system and architecture of the current platform by matching the `os.arch` and `os.name` system properties against predefined patterns for supported architectures (Arch) and operating systems (OS). If a matching platform is found, it returns a `Platform` object representing it. If no match is found, it throws an `UnsupportedPlatformException`.",
        "reference_summary": "Attempt to detect the current platform.\n\n@return The current platform.\n\n@throws UnsupportedPlatformException if the platform cannot be detected.",
        "BLEU": 0.0,
        "METEOR": 0.2922,
        "ROUGE-L": 0.1091
    },
    {
        "function": "public <T> T getNodeMetaData(Object key) {\n        if (metaDataMap == null) {\n            return (T) null;\n        }\n        return (T) metaDataMap.get(key);\n    }",
        "prompt_type": "Few-Shot",
        "gemini_summary": "Summary: This function retrieves metadata associated with a given key from an internal map. If the map is empty or the key is not found, it returns null. The returned value is cast to the specified type `T`.",
        "reference_summary": "Gets the node meta data.\n\n@param key - the meta data key\n@return the node meta data value for this key",
        "BLEU": 0.0,
        "METEOR": 0.1542,
        "ROUGE-L": 0.1364
    },
    {
        "function": "public void copyNodeMetaData(ASTNode other) {\n        if (other.metaDataMap == null) {\n            return;\n        }\n        if (metaDataMap == null) {\n            metaDataMap = new ListHashMap();\n        }\n        metaDataMap.putAll(other.metaDataMap);\n    }",
        "prompt_type": "Few-Shot",
        "gemini_summary": "Summary: This function copies the metadata from another ASTNode to the current ASTNode. If the other node has no metadata, it does nothing. If the current node has no metadata, it initializes a new map before copying.",
        "reference_summary": "Copies all node meta data from the other node to this one\n@param other - the other node",
        "BLEU": 0.0,
        "METEOR": 0.2261,
        "ROUGE-L": 0.2051
    },
    {
        "function": "public void setNodeMetaData(Object key, Object value) {\n        if (key==null) throw new GroovyBugError(\"Tried to set meta data with null key on \"+this+\".\");\n        if (metaDataMap == null) {\n            metaDataMap = new ListHashMap();\n        }\n        Object old = metaDataMap.put(key,value);\n        if (old!=null) throw new GroovyBugError(\"Tried to overwrite existing meta data \"+this+\".\");\n    }",
        "prompt_type": "Few-Shot",
        "gemini_summary": "Summary: This function sets metadata on a node, storing it in a map. It prevents null keys and overwriting existing metadata entries, throwing an error if either occurs.",
        "reference_summary": "Sets the node meta data.\n\n@param key - the meta data key\n@param value - the meta data value\n@throws GroovyBugError if key is null or there is already meta\ndata under that key",
        "BLEU": 0.0,
        "METEOR": 0.0599,
        "ROUGE-L": 0.0444
    }
]