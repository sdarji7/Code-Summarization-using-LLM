[
    {
        "function": "function (state, action) {\n    return _.defaults({\n      isValidating: action.isValidating,\n      lastAction: IS_VALIDATING\n    }, state)\n  }",
        "prompt_type": "Expert",
        "gemini_summary": "Okay, here's the summary of that function:\n\n\"This function is a reducer (likely for a Redux or similar state management system). It updates the state object by merging new properties onto it. Specifically, it sets `isValidating` to the value of `action.isValidating` and `lastAction` to the constant `IS_VALIDATING`.  Critically, it uses `_.defaults` from the Lodash library, which means it *only* updates these properties if they *don't already exist* in the `state` object.  If the properties are already in `state`, they will not be overwritten.\"",
        "reference_summary": "Update is validating result\n@param {State} state - state to update\n@param {Action} action - action\n@returns {State} - updated state",
        "BLEU": 0.0,
        "METEOR": 0.1103,
        "ROUGE-L": 0.075
    },
    {
        "function": "function addWidgetForFilter (view, filter, editModeHint) {\n  var gridster = view._widgetsGridster;\n  var row = filter.row || 1;\n  var col = filter.col || 1;\n  var sizeX = filter.size_x || 3;\n  var sizeY = filter.size_y || 3;\n\n  var el = gridster.add_widget('<div class=\"widgetOuterFrame\"></div>', sizeX, sizeY, col, row);\n  var frameView = new WidgetFrameView({\n    model: filter\n  });\n\n  // render, and render content of widget frame\n  view.renderSubview(frameView, el[0]);\n  frameView.renderContent();\n\n  // link element and view so we can:\n  // a) on remove, get to the HTMLElement from the WidgetFrameView\n  // b) on resize, get to the WidgetFrameView from the HTMLElement\n  frameView.gridsterHook = el[0];\n  $(el[0]).data('spotWidgetFrameView', frameView);\n\n  // try to initialize and render possibly present data\n  // only follow editModeHint when the widget is configured, default to true\n  var chartView = frameView.widget;\n  chartView.model.updateConfiguration();\n  if (chartView.model.isConfigured) {\n    if (!filter.isInitialized) {\n      filter.initDataFilter();\n    }\n    if (!chartView.isInitialized) {\n      chartView.initChart();\n    }\n    chartView.update();\n\n    frameView.editMode = editModeHint;\n  } else {\n    // widget is not configured, ignore editModeHint\n    // and always go to edit mode\n    frameView.editMode = true;\n  }\n\n  filter.on('newData', function () {\n    chartView.update();\n  });\n}",
        "prompt_type": "Expert",
        "gemini_summary": "Okay, here's the breakdown of the `addWidgetForFilter` function for a junior dev:\n\nThis JavaScript function adds a widget to a dashboard view based on a filter object.\n\n1.  **Grid Setup:** It gets the `gridster` object (likely a library for creating resizable, draggable grids) from the `view`. It then retrieves default values for row, column, width (`sizeX`), and height (`sizeY`) from the `filter` object, using fallback defaults if those properties aren't specified in the filter.\n\n2.  **Widget Creation:** Using `gridster.add_widget()`, it creates a new widget element (a `<div>` with class \"widgetOuterFrame\") and adds it to the grid at the specified row/column with the specified size.\n\n3.  **Frame View Instantiation:** A `WidgetFrameView` is created, associated with the `filter` object, and then rendered inside the newly created widget element using `view.renderSubview()`.  `frameView.renderContent()` is then called.  This likely sets up the visual frame and structure *around* the actual widget content.\n\n4.  **Linking Element and View:**  It establishes a link between the HTML element (`el[0]`) of the widget and the `WidgetFrameView` instance.  This allows you to access either one from the other, which is useful for things like removing the widget or handling resize events. `frameView.gridsterHook = el[0]` and  `$(el[0]).data('spotWidgetFrameView', frameView)` accomplish this.\n\n5.  **Widget Initialization and Update:**\n    *   It checks if the underlying chart/widget is configured (via `chartView.model.isConfigured`). If it's configured:\n        *   If the data filter or chart haven't been initialized (`filter.isInitialized` or `chartView.isInitialized`), it initializes them (`filter.initDataFilter()` and `chartView.initChart()`).\n        *   It updates the chart/widget with data using `chartView.update()`.\n        *   Sets edit mode with the help of the `editModeHint`.\n    *   If the widget isn't configured, it *forces* the widget into edit mode.\n\n6.  **Data Update Listener:** Finally, it sets up a listener on the `filter` object for a `newData` event. When this event is triggered, it calls `chartView.update()` to refresh the widget with the new data.",
        "reference_summary": "Add a widget to the analyze page for the given filter\n\nview {View}             Ampersand View instance of the analyze page\nfilter {Filter}         Spot filter instance to create the widget for\neditModeHint {boolean}  Try to start plot in editMode (ie. accepts dnd of facets) [true] or in interaction mode (false)",
        "BLEU": 0.0,
        "METEOR": 0.1615,
        "ROUGE-L": 0.0991
    },
    {
        "function": "function inRange (value, min, max) {\n  const int = parseInt(value, 10)\n\n  return (\n    `${int}` === `${value.replace(/^0/, '')}` &&\n    int >= min &&\n    int <= max\n  )\n}",
        "prompt_type": "Expert",
        "gemini_summary": "Okay, here's a breakdown of the `inRange` function:\n\n**In a nutshell:** This JavaScript function checks if a given `value` is a valid integer within a specified `min` and `max` range.  It also ensures the `value` doesn't have leading zeros (unless the number is literally zero).\n\n**Here's what it does step-by-step:**\n\n1. **`parseInt(value, 10)`:**  It first tries to convert the input `value` to an integer using `parseInt` with base 10. The result is stored in `int`.\n\n2. **`${int}` === `${value.replace(/^0/, '')}`:** This is the part that validates the input format:\n   -  `value.replace(/^0/, '')` removes any leading zeros from the original `value` string.\n   -  `${int}` implicitly converts the integer `int` back into a string.\n   -  It then compares the string representation of the parsed integer with the original value (with leading zeros removed).  This verifies that the original `value` was indeed a valid integer without extra non-numeric characters.\n\n3. **`int >= min && int <= max`:**  Finally, it checks if the parsed integer `int` falls within the inclusive range defined by `min` and `max`.\n\n4. **`return`:** The function returns `true` if *both* the format validation (step 2) and the range check (step 3) pass. Otherwise, it returns `false`.\n\n**In simpler terms:**\n\nIt checks if a string can be cleanly converted to a number within a certain range, and also makes sure the original string looks like a \"normal\" number (no funny business with leading zeros unless the number is zero itself).",
        "reference_summary": "Determine if value is within a numeric range\n@param {String|Number} value - value to check\n@param {Number} min - start of range (inclusive)\n@param {Number} max - end of range (inclusive)\n@returns {Boolean} whether or not value is within range",
        "BLEU": 0.0,
        "METEOR": 0.1503,
        "ROUGE-L": 0.1302
    },
    {
        "function": "function markdown(options) {\n  return new Remarkable(extend({\n    breaks: false,\n    html: true,\n    langPrefix: 'lang-',\n    linkify: true,\n    typographer: false,\n    xhtmlOut: false\n  }, options));\n}",
        "prompt_type": "Expert",
        "gemini_summary": "Okay, so this `markdown` function is a wrapper for creating a Remarkable Markdown parser. It takes an optional `options` object as input. Inside the function, it's creating a new `Remarkable` object (presumably from the 'remarkable' library).  \n\nThe important part is that it's merging your `options` with a set of default settings:\n\n*   `breaks: false` (line breaks become `<br>` tags)\n*   `html: true` (HTML tags are allowed in the Markdown)\n*   `langPrefix: 'lang-'` (prefix for language classes in code blocks)\n*   `linkify: true` (plain text URLs are automatically converted to links)\n*   `typographer: false` (smart typography like quotes and dashes are disabled)\n*   `xhtmlOut: false` (output should be HTML, not XHTML)\n\nIf you pass in an `options` object, its settings will override these defaults. Finally, it returns the newly created `Remarkable` object ready to parse Markdown.  So basically, it's a convenient way to get a Remarkable parser with pre-configured settings or customized settings if you provide them.",
        "reference_summary": "Shared settings for remarkable\n\n@param {Object} `options`\n@return {Object}\n@api private",
        "BLEU": 0.0,
        "METEOR": 0.098,
        "ROUGE-L": 0.0476
    },
    {
        "function": "function partitionValueToIndex (partition, value) {\n  var group;\n\n  if (!partition) {\n    // no(sub)partitioning return first element\n    return 0;\n  }\n\n  // with (sub)partitioning\n  group = partition.groups.get(value, 'value');\n\n  if (group) {\n    // string in partition\n    return group.groupIndex;\n  } else {\n    // string not in partition\n    return -1;\n  }\n}",
        "prompt_type": "Expert",
        "gemini_summary": "Okay, here's the breakdown of the `partitionValueToIndex` function:\n\n\"This function takes a `partition` object and a `value` as input. It tries to find the index of a group within the `partition` that matches the given `value`.\n\n*   **If `partition` is null or undefined (meaning no partitioning is defined), it simply returns 0 (index of the first element).**\n*   **Otherwise, it attempts to find a `group` within the `partition.groups` collection using the provided `value`.** It appears `partition.groups.get` searches for a group where the `value` matches.\n*   **If a `group` is found (meaning the `value` exists within the partitioning), it returns the `groupIndex` property of that `group`.**\n*   **If no matching `group` is found, it returns -1, indicating the `value` is not part of the partition.**\"",
        "reference_summary": "Get the index in chartjs datastructures from the group value\nwith proper fallbacks\n@params {Partition} partition (optional)\n@params {Object} value value\n@returns {number|null} index",
        "BLEU": 0.0,
        "METEOR": 0.0882,
        "ROUGE-L": 0.0879
    }
]